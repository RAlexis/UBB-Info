     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  extern printf
    12                                  import printf msvcrt.dll
    13                                  
    14                                  extern fopen
    15                                  import fopen msvcrt.dll
    16                                  
    17                                  extern fread
    18                                  import fread msvcrt.dll
    19                                  
    20                                  extern fclose
    21                                  import fclose msvcrt.dll
    22                                  
    23                                  ; our data is declared here (the variables needed by our program)
    24                                  segment data use32 class=data
    25 00000000 6669732E74787400            fileName db "fis.txt", 0
    26 00000008 7200                        accessRights db "r", 0
    27 0000000A FFFFFFFF                    descriptor dd -1
    28                                      
    29                                      len equ 100
    30 0000000E 00<rept>                    sir times (len + 1) db 0
    31                                      
    32 00000073 257300                      format_str db "%s", 0
    33 00000076 256300                      format_chr db "%c", 0
    34 00000079 25642000                    format_int db "%d ", 0
    35 0000007D 25752000                    format_unsigned db "%u ", 0
    36                                      
    37 00000081 00000000<rept>              occurences times 26 dd 0
    38                                  
    39                                  ; our code starts here
    40                                  segment code use32 class=code
    41                                      start:
    42 00000000 68[08000000]                    push dword accessRights
    43 00000005 68[00000000]                    push dword fileName
    44 0000000A FF15[00000000]                  call [fopen]
    45 00000010 83C408                          add esp, 8
    46                                          
    47 00000013 83F800                          cmp eax, 0
    48 00000016 7478                            je final
    49                                          
    50 00000018 A3[0A000000]                    mov [descriptor], eax
    51                                          
    52 0000001D FF35[0A000000]                  push dword [descriptor]
    53 00000023 6A64                            push dword len
    54 00000025 6A01                            push dword 1
    55 00000027 68[0E000000]                    push dword sir
    56 0000002C FF15[00000000]                  call [fread]
    57 00000032 83C410                          add esp, 16
    58                                          
    59 00000035 50                              push eax
    60                                          
    61 00000036 FF35[0A000000]                  push dword [descriptor]
    62 0000003C FF15[00000000]                  call [fclose]
    63 00000042 83C404                          add esp, 4
    64                                          
    65 00000045 58                              pop eax
    66                                          
    67                                          ;push dword eax
    68                                          ;push dword format_int
    69                                          ;call [printf]
    70                                          ;add esp, 8
    71                                          
    72 00000046 83F800                          cmp eax, 0
    73 00000049 7445                            je final
    74                                          
    75 0000004B BE00000000                      mov esi, 0
    76 00000050 89C1                            mov ecx, eax
    77                                          
    78                                          mainloop:
    79 00000052 8A86[0E000000]                      mov al, [sir + esi]
    80 00000058 660FB6C0                            movzx ax, al
    81 0000005C 0FB7C0                              movzx eax, ax
    82                                              
    83 0000005F 83E861                              sub eax, 97
    84                                              
    85                                              ;pushad
    86                                              
    87                                              ;push dword eax
    88                                              ;push dword format_int
    89                                              ;call [printf]
    90                                              ;add esp, 8
    91                                              
    92                                              ;popad
    93                                              
    94 00000062 830485[81000000]01                  add dword [occurences + eax * 4], 1
    95                                              
    96 0000006A 46                                  inc esi
    97 0000006B E2E5                            loop mainloop
    98                                          
    99 0000006D B91A000000                      mov ecx, 26 ; no of letters in the alphabet
   100 00000072 BE00000000                      mov esi, 0
   101                                          loopocc:
   102 00000077 60                                  pushad
   103                                              
   104 00000078 FFB6[81000000]                      push dword [occurences + esi]
   105 0000007E 68[79000000]                        push dword format_int
   106 00000083 FF15[00000000]                      call [printf]
   107 00000089 83C408                              add esp, 8
   108                                              
   109 0000008C 61                                  popad
   110                                              
   111 0000008D 46                                  inc esi
   112 0000008E E2E7                            loop loopocc
   113                                      
   114                                          final:
   115                                              ; exit(0)
   116 00000090 6A00                                push    dword 0      ; push the parameter for exit onto the stack
   117 00000092 FF15[00000000]                      call    [exit]       ; call exit to terminate the program
