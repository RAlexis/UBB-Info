     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  extern printf
    12                                  import printf msvcrt.dll
    13                                  
    14                                  extern scanf
    15                                  import scanf msvcrt.dll
    16                                  
    17                                  extern fopen
    18                                  import fopen msvcrt.dll
    19                                  
    20                                  extern fread
    21                                  import fread msvcrt.dll
    22                                  
    23                                  extern fclose
    24                                  import fclose msvcrt.dll
    25                                                            
    26                                  ; our data is declared here (the variables needed by our program)
    27                                  segment data use32 class=data
    28 00000000 257300                      format_str db "%s", 0
    29 00000003 256400                      format_int db "%d", 0
    30 00000006 256300                      format_char db "%c", 0
    31                                      
    32 00000009 00<rept>                    char_special times 2 db 0
    33 0000000B 00000000                    nr dd 0
    34                                      
    35 0000000F 00<rept>                    nume_fisier times 20 db 0
    36                                      
    37 00000023 7200                        mod_acces db "r", 0
    38 00000025 FFFFFFFF                    descriptor dd -1
    39                                      
    40                                      text_len equ 100
    41 00000029 00<rept>                    text times (text_len + 1) db 0
    42                                      
    43 0000008E 656E6420746578740A-         endText db "end text", 10, 0
    43 00000097 00                 
    44 00000098 617265206D6169206D-         ammt db "are mai multe", 10, 0
    44 000000A1 756C74650A00       
    45 000000A7 746573740A00                testtext db "test", 10, 0
    46                                  
    47                                  ; our code starts here
    48                                  segment code use32 class=code
    49                                      start:        
    50 00000000 68[0F000000]                    push dword nume_fisier
    51 00000005 68[00000000]                    push dword format_str
    52 0000000A FF15[00000000]                  call [scanf]
    53 00000010 83C408                          add esp, 8
    54                                          
    55                                          ;push dword nume_fisier
    56                                          ;push dword format_str
    57                                          ;call [printf]
    58                                          ;add esp, 8
    59                                          
    60 00000013 68[09000000]                    push dword char_special
    61 00000018 68[00000000]                    push dword format_str
    62 0000001D FF15[00000000]                  call [scanf]
    63 00000023 83C408                          add esp, 8
    64                                          
    65 00000026 68[0B000000]                    push dword nr
    66 0000002B 68[03000000]                    push dword format_int
    67 00000030 FF15[00000000]                  call [scanf]
    68 00000036 83C408                          add esp, 8
    69                                          
    70                                          ;push dword nume_fisier
    71                                          ;push dword format_str
    72                                          ;call [printf]
    73                                          ;add esp, 8
    74                                          
    75 00000039 68[23000000]                    push dword mod_acces
    76 0000003E 68[0F000000]                    push dword nume_fisier
    77 00000043 FF15[00000000]                  call [fopen]
    78 00000049 83C408                          add esp, 8
    79                                          
    80 0000004C 83F800                          cmp eax, 0
    81 0000004F 0F8492000000                    je final
    82                                          
    83 00000055 A3[25000000]                    mov [descriptor], eax
    84                                          
    85 0000005A FF35[25000000]                  push dword [descriptor]
    86 00000060 6A64                            push dword text_len
    87 00000062 6A01                            push dword 1
    88 00000064 68[29000000]                    push dword text
    89 00000069 FF15[00000000]                  call [fread]
    90 0000006F 83C410                          add esp, 16
    91                                          
    92 00000072 60                              pushad
    93 00000073 FF35[25000000]                  push dword [descriptor]
    94 00000079 FF15[00000000]                  call [fclose]
    95 0000007F 83C404                          add esp, 4
    96 00000082 61                              popad
    97                                          
    98                                          ; eax contine nr de caractere citite
    99                                          ;push eax
   100                                          
   101                                          ;push dword text
   102                                          ;push dword format_str
   103                                          ;call [printf]
   104                                          ;add esp, 8
   105                                          
   106                                          ;pop eax
   107                                          
   108 00000083 BE[29000000]                    mov esi, text
   109 00000088 89C2                            mov edx, eax ; edx = lungimea sirului
   110                                          
   111 0000008A 83F800                          cmp eax, 0
   112 0000008D 7458                            je final
   113                                          
   114                                          mainloop:
   115 0000008F BB00000000                          mov ebx, 0 ; nr de caractere per cuvant
   116                                             
   117                                              citeste_si_afiseaza_cuvant:
   118 00000094 AC                                      lodsb
   119                                                  
   120 00000095 3C00                                    cmp al, 0 ; s-a terminat textul
   121 00000097 741B                                    je complete_word_if_needed
   122                                                  
   123 00000099 3C20                                    cmp al, 32 ; spatiu (end of word)
   124 0000009B 7417                                    je complete_word_if_needed
   125                                                  
   126 0000009D 43                                      inc ebx
   127                                                  
   128                                                  ; al => eax
   129 0000009E 6698                                    cbw
   130 000000A0 98                                      cwde
   131                                                  
   132 000000A1 60                                      pushad
   133                                                  
   134 000000A2 50                                      push dword eax
   135 000000A3 68[06000000]                            push dword format_char
   136 000000A8 FF15[00000000]                          call [printf]
   137 000000AE 83C408                                  add esp, 8
   138                                                  
   139 000000B1 61                                      popad
   140                                                  
   141 000000B2 EBE0                                    jmp citeste_si_afiseaza_cuvant
   142                                                  
   143                                                  complete_word_if_needed:
   144                                                      ;pushad
   145                                                      ;push dword testtext
   146                                                      ;push dword format_str
   147                                                      ;call [printf]
   148                                                      ;jmp final
   149                                                      ;popad
   150                                                  
   151 000000B4 3B1D[0B000000]                              cmp ebx, [nr]
   152 000000BA 7D1F                                        jge mainloopcont
   153                                                      
   154                                                      ; nr - ebx => cate caractere trebuie ca sa completam cuvantul
   155                                                      ;mov ebp, [nr]
   156                                                      ;sub ebp, ebx
   157                                                      
   158                                                      ;mov ecx, ebp
   159                                                      
   160 000000BC 8B0D[0B000000]                              mov ecx, [nr]
   161 000000C2 29D9                                        sub ecx, ebx
   162                                                      
   163                                                      ;pushad
   164                                                      ;push dword ecx
   165                                                      ;push dword format_int
   166                                                      ;call [printf]
   167                                                      ;jmp final
   168                                                      ;popad
   169                                                      
   170                                                      complete_word:
   171 000000C4 60                                              pushad
   172                                                          
   173 000000C5 68[09000000]                                    push dword char_special
   174 000000CA 68[00000000]                                    push dword format_str
   175 000000CF FF15[00000000]                                  call [printf]
   176 000000D5 83C408                                          add esp, 8
   177                                                          
   178 000000D8 61                                              popad
   179 000000D9 E2E9                                        loop complete_word
   180                                                      
   181                                                  mainloopcont:
   182                                                      
   183                                                      ; iesim din mainloop daca am parcurs tot textul
   184 000000DB 29DA                                        sub edx, ebx ; scadem caracterele parcurse
   185 000000DD 83EA01                                      sub edx, 1 ; scadem spatiul
   186 000000E0 83FA00                                      cmp edx, 0
   187 000000E3 7E02                                        jle final
   188                                                      
   189 000000E5 EBA8                            jmp mainloop
   190                                      
   191                                          final:
   192                                              ; exit(0)
   193 000000E7 6A00                                push    dword 0      ; push the parameter for exit onto the stack
   194 000000E9 FF15[00000000]                      call    [exit]       ; call exit to terminate the program
