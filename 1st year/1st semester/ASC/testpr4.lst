     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  extern fprintf
    13                                  import fprintf msvcrt.dll
    14                                  extern scanf
    15                                  import scanf msvcrt.dll
    16                                  extern printf
    17                                  import printf msvcrt.dll
    18                                  extern fclose
    19                                  import fclose msvcrt.dll
    20                                  extern fopen
    21                                  import fopen msvcrt.dll
    22                                  
    23                                  segment data use32 class=data
    24 00000000 00000000                    var dd 0
    25 00000004 2564                        format db "%d"
    26                                      
    27 00000006 6669732E74787400            fisier db "fis.txt", 0
    28 0000000E 7700                        mod_acces db "w", 0
    29 00000010 FFFFFFFF                    descriptor dd -1
    30                                      
    31 00000014 3000                        text db "0", 0
    32                                  
    33                                  ; our code starts here
    34                                  segment code use32 class=code
    35                                      start:
    36                                          ;mov eax, 0 ; nr
    37 00000000 BB00000000                      mov ebx, 0 ; suma numerelor
    38                                          
    39                                          repeta:
    40 00000005 68[00000000]                        push dword var
    41 0000000A 68[04000000]                        push dword format
    42 0000000F FF15[00000000]                      call [scanf]
    43 00000015 83C408                              add esp, 8
    44                                              
    45 00000018 A1[00000000]                        mov eax, [var]
    46                                              
    47                                              ;push dword eax
    48                                              ;push dword format
    49                                              ;call [printf]
    50                                              ;add esp, 8
    51                                              
    52 0000001D 83F800                              cmp eax, 0
    53 00000020 7408                                je termina_repeta
    54                                              
    55 00000022 031D[00000000]                      add ebx, [var]
    56 00000028 EBDB                             jmp repeta
    57                                              
    58                                          termina_repeta:
    59                                              ;push dword ebx
    60                                              ;push dword format
    61                                              ;call [printf]
    62                                              ;add esp, 8
    63                                              
    64 0000002A 68[0E000000]                        push dword mod_acces
    65 0000002F 68[06000000]                        push dword fisier
    66 00000034 FF15[00000000]                      call [fopen]
    67 0000003A 83C408                              add esp, 8
    68                                              
    69 0000003D A3[10000000]                        mov [descriptor], eax
    70                                              
    71 00000042 83F800                              cmp eax, 0
    72 00000045 741A                                je final
    73                                              
    74 00000047 89D9                                mov ecx, ebx ; pt loop
    75                                              
    76                                              scrie_bytes:
    77 00000049 51                                      push ecx
    78                                                  
    79 0000004A 68[14000000]                            push dword text
    80 0000004F FF35[10000000]                          push dword [descriptor]
    81 00000055 FF15[00000000]                          call [fprintf]
    82 0000005B 83C408                                  add esp, 8  
    83                                                  
    84 0000005E 59                                      pop ecx
    85                                                  
    86 0000005F E2E8                                    loop scrie_bytes
    87                                      
    88                                          final:            
    89 00000061 FF35[10000000]                      push dword [descriptor]
    90 00000067 FF15[00000000]                      call [fclose]
    91 0000006D 83C404                              add esp, 4
    92                                              
    93                                              ; exit(0)
    94 00000070 6A00                                push    dword 0      ; push the parameter for exit onto the stack
    95 00000072 FF15[00000000]                      call    [exit]       ; call exit to terminate the program
